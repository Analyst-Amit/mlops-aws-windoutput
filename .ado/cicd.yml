# Pull request validation and push trigger
trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - '*'

# Trigger production deployment only on release tag
trigger:
  tags:
    include:
      - 'v*'

# Pool configuration: define the VM image to use
pool:
  vmImage: 'ubuntu-latest'

# Link variable groups
variables:
  - group: AWSVariables
  - group: DockerCredentials

# Define stages
stages:
  # # Linter stage
  # - stage: Linters
  #   displayName: "Run Code Linters"
  #   jobs:
  #     # Job to run Tox Linting
  #     - job: tox_linting      # Name of the job
  #       displayName: "Running Tox Linting"
  #       steps:
  #         # Checkout code
  #         - checkout: self

  #         # Set up Python environment
  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'
  #             addToPath: true

  #         # Install dependencies and run Tox with the linting environment
  #         - script: |
  #             pip install tox  # Install Tox
  #             tox -e pre-commit    # Run Tox with the linting environment
  #           displayName: "Running Tox Linting"

  # Tests stage
  # - stage: Tests
  #   displayName: "Run Code Tests"
  #   dependsOn: Linters
  #   jobs:
  #     # Job to run Tox test cases
  #     - job: tox_run_test_cases      # Name of the job
  #       displayName: "Running Tox test cases"
  #       steps:
  #         # Checkout code
  #         - checkout: self   # Checkout the current repository code

  #         # Set up Python environment
  #         - task: UsePythonVersion@0
  #           inputs:
  #             versionSpec: '3.x'     # Specify Python version
  #             addToPath: true

  #         # Install dependencies and run Tox with the test environment
  #         - script: |
  #             pip install tox  # Install Tox
  #             tox -e run_test_cases
  #           displayName: "Executing all test cases"

  # Build and Push Docker Image to Staging
  - stage: Staging
    displayName: "Deploy to Staging"
    # dependsOn: Tests
    jobs:
      - job: docker_build_and_push_staging
        displayName: "Build Docker Image and Push to Docker Hub (Staging)"
        steps:
          - checkout: self

          # Debugging to see the value of DOCKER_USERNAME
          - script: echo "DOCKER_USERNAME is- $(DOCKER_USERNAME)"
            displayName: "Print DOCKER_USERNAME"

          # Build Docker image for staging
          - task: Docker@2
            displayName: 'Build Docker Image for Staging'
            inputs:
              containerRegistry: 'docker-hub-connection'  # Use your service connection name here
              repository: '$(DOCKER_USERNAME)/mlops-aws-windoutput-staging'  # Staging repository
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'  # Path to your Dockerfile
              tags: 'staging-latest'

  # Build and Push Docker Image to Production (Manual Approval)
  - stage: Production
    displayName: "Deploy to Production"
    dependsOn: Staging
    condition: and(succeeded(), contains(variables['Build.SourceBranch'], 'refs/tags/v'))

    # Add manual approval for production deployment
    approval:
      - name: "Manual Approval"
        type: "manual"
        displayName: "Approve Production Deployment"
        timeoutInMinutes: 120
        allowApprovalsFromPipelineOwner: true

    jobs:
      - job: docker_build_and_push_prod
        displayName: "Build Docker Image and Push to Docker Hub (Production)"
        steps:
          - checkout: self

          # Debugging to see the value of DOCKER_USERNAME
          - script: echo "DOCKER_USERNAME is- $(DOCKER_USERNAME)"
            displayName: "Print DOCKER_USERNAME"

          # Build Docker image for production
          - task: Docker@2
            displayName: 'Build Docker Image for Production'
            inputs:
              containerRegistry: 'docker-hub-connection'  # Use your service connection name here
              repository: '$(DOCKER_USERNAME)/mlops-aws-windoutput'  # Production repository
              command: 'buildAndPush'
              Dockerfile: 'Dockerfile'  # Path to your Dockerfile
              tags: |
                latest
                $(Build.BuildId)
